# -*- coding: utf-8 -*-
"""Netflix Subscriptions Forecasting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HGceDReo-nlIMwp-6docj1JmgdORp480
"""



"""Below is the process we can follow to forecast subscription counts for Netflix:

Gather historical Netflix subscriptions growth data
Preprocess and clean the data
Explore and analyze time series patterns
Choose a time series forecasting model (e.g., ARIMA, LSTM)
Train the model using the training data
Forecast future Netflix subscription counts

"""



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import plotly.express as px
import plotly.io as pio
pio.templates.default = "plotly_white"
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

# reading the data
data = pd.read_csv('/content/Netflix-Subscriptions.csv')
print(data.head())

"""The dataset contains subscription counts of Netflix at the start of each quarter from 2013 to 2023. Before moving forward, letâ€™s convert the Time Period column into a datetime format:

"""

data['Time Period'] = pd.to_datetime(data['Time Period'],
                                     format='%d/%m/%Y')
print(data.head())

""" The quarterly subscription growth of Netflix:"""

fig = go.Figure()
fig.add_trace(go.Scatter(x=data['Time Period'],
                         y=data['Subscribers'],
                         mode='lines', name='Subscribers'))
fig.update_layout(title='Netflix Quarterly Subscriptions Growth',
                  xaxis_title='Date',
                  yaxis_title='Netflix Subscriptions')
fig.show()

"""In the above graph, we can see that the growth of Netflix subscribers is not seasonal. So we can use a forecasting technique like ARIMA in this dataset.

Using ARIMA for Forecasting Netflix Quarterly Subscriptions
"""

time_series = data.set_index('Time Period')['Subscribers']

differenced_series = time_series.diff().dropna()

# Plot ACF and PACF of differenced time series
fig, axes = plt.subplots(1, 2, figsize=(12, 4))
plot_acf(differenced_series, ax=axes[0])
plot_pacf(differenced_series, ax=axes[1])
plt.show()

p, d, q = 1, 1, 1
model = ARIMA(time_series, order=(p, d, q))
results = model.fit()
print(results.summary())

""" Forecast the number of subscribers for the next five quarters:"""

future_steps = 5
predictions = results.predict(len(time_series), len(time_series) + future_steps - 1)
predictions = predictions.astype(int)

# Create a DataFrame with the original data and predictions
forecast = pd.DataFrame({'Original': time_series, 'Predictions': predictions})

# Plot the original data and predictions
fig = go.Figure()

fig.add_trace(go.Scatter(x=forecast.index, y=forecast['Predictions'],
                         mode='lines', name='Predictions'))

fig.add_trace(go.Scatter(x=forecast.index, y=forecast['Original'],
                         mode='lines', name='Original Data'))

fig.update_layout(title='Netflix Quarterly Subscription Predictions',
                  xaxis_title='Time Period',
                  yaxis_title='Subscribers',
                  legend=dict(x=0.1, y=0.9),
                  showlegend=True)

fig.show()



"""From the above forecast we can see that by OCT 2024 the expected subscibers will be around 263M"""

